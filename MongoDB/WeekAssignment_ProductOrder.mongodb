// MongoDB Playground
// Use Ctrl+Space inside a snippet or a string literal to trigger completions.

const database = 'ProductOrder';

// Create a new database.
use(database);

// Create a new collection.
/*
db.createCollection('Product');
db.createCollection('Inventory');
db.createCollection('User');
db.createCollection('Order');

// First 5 rows of product, inventory, user, order collection

db.Product.find().limit(5)
db.Inventory.find().limit(5)
db.User.find().limit(5)
db.Order.find().limit(5)
*/
//Unique brand and models name from Product collections
result = db.Product.distinct('brand')
printjson(result)
result = db.Product.distinct('model')
printjson(result)
db.Product.aggregate([{'$group':{"_id":{brand:"$brand",model:"$model"}}}])

// Get Min max for a given product brand
db.Product.find(
   { $expr: { $eq: [ "$brand", "$$targetBrand" ] } },
   { _id: 0 },
   { let : { targetBrand: "Sony" }} 
   ).sort({'price':-1}).limit(1)
   
   db.Product.find(
   { $expr: { $eq: [ "$brand", "$$targetBrand" ] } },
   { _id: 0 },
   { let : { targetBrand: "Sony" }} 
   ).sort({'price':1}).limit(1)

   //7. Display quantity and lastupdate date for SNY-11001

   db.Product.aggregate([
    {
      $match:{sku:"SNY-11001"}
    },
    {
      $lookup: {
                from: "Inventory",
                localField: "sku",
                foreignField: "sku",
                as: "inventory"
              },

    },
    {
    $unwind: "$inventory"
    },
    {
      $addFields: {
        quantity: "$inventory.quantity"
      }
    },
    {
      $project: {
        sku:1,
        last_updated:1,
        quantity:1,
        _id:0
      }
    }

   ]).pretty()
   // 8. Listed total number of supplier count
   db.User.aggregate([            
             { $match: { role:"Supplier" }},
              {$count:"supplier_count"}           

   ]).pretty()
   
   //9. Display SKU, code, price, brand and warranty for model 'Bravia-X' 
   db.Product.find(
    {model:"Bravia-X"},
    {sku:1,code : 1,price:1,brand:1,warranty:1,_id:0}
   ).pretty()
   //10. Find all information of Sony product have a price greater than 1 lakh
   db.Product.find({ $and:[{price:{$gt:100000}},{brand:"Sony"}] } )
// 11. FInd total no: of product by each brand and sort them in descending order
 db.Product.aggregate([{
  $group: {
    _id: "$brand",
    count: {  $sum:1  } } },
  {
      $sort: {count: -1,_id:1 }  
  }])
  // 12. find total Users by each role in decending order and results in temporary collection
  db.User.aggregate([{
  $group: {
    _id: "$role",
    count: {  $sum:1  } } },
  {
      $sort: {count: -1,_id:1 }  
  },
  {
    $out:"user_role_cnt"
  }  
  ])

  db.user_role_cnt.find().pretty()